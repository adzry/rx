name: Self Publish

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile && pnpm -w build

  migrate:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1

      - name: Create env file from GitHub secret
        run: echo "${{ secrets.ENV_PRODUCTION }}" > .env.production

      - name: Load secrets
        run: |
          while IFS='=' read -r key val; do
            [[ -z "$key" || "$key" =~ ^# ]] && continue
            echo "$key=$val" >> $GITHUB_ENV
          done < .env.production

      - name: Push schema
        run: |
          set -e
          supabase link --project-ref "$SUPABASE_PROJECT_REF"
          supabase db push \
            --db-url "postgresql://postgres:${SUPABASE_DB_PASSWORD}@db.${SUPABASE_PROJECT_REF}.supabase.co:5432/postgres"

  deploy-api:
    needs: migrate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create env file from GitHub secret
        run: echo "${{ secrets.ENV_PRODUCTION }}" > .env.production

      - name: Load secrets
        run: |
          while IFS='=' read -r key val; do
            [[ -z "$key" || "$key" =~ ^# ]] && continue
            echo "$key=$val" >> $GITHUB_ENV
          done < .env.production

      - name: Deploy API (Fly.io)
        run: |
          set -e
          flyctl deploy --local-only --config apps/api/fly.toml || {
            echo "❌ API deploy failed. Retrying..."
            sleep 10
            flyctl deploy --local-only --config apps/api/fly.toml
          }

  deploy-web:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create env file from GitHub secret
        run: echo "${{ secrets.ENV_PRODUCTION }}" > .env.production

      - name: Load secrets
        run: |
          while IFS='=' read -r key val; do
            [[ -z "$key" || "$key" =~ ^# ]] && continue
            echo "$key=$val" >> $GITHUB_ENV
          done < .env.production

      - name: Deploy Web (Vercel)
        run: |
          set -e
          npx vercel --token=$VERCEL_TOKEN \
            --prod --confirm --cwd apps/web || {
            echo "❌ Web deploy failed. Retrying..."
            sleep 10
            npx vercel --token=$VERCEL_TOKEN --prod --confirm --cwd apps/web
          }
